generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma/client"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  userId    String?  @unique
  name      String?
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  diaries   Diary[]
  appusages AppUsage[]
  checklists Checklist[]
  schedules Schedule[]
  feedbackLimits UserFeedbackLimit[]
  emotions  EmotionRecord[]
  locations LocationLog[]
  steps     StepRecord[]
  aiFeedbacks AiFeedback[]

  @@index([userId])
  @@map("users")
}

model AppUsage {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date             String
  packageName      String
  appName          String
  usageTimeInMillis Int
  appIconPath      String?
  isSynced         Boolean  @default(false)

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([userId, date])
  @@index([userId, packageName])
  @@map("appusages")
}

model Diary {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date       String
  title      String
  content    String?
  photoPaths String?  // JSON 배열로 저장
  isSynced   Boolean  @default(false)

  photos     Photo[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, date])
  @@index([userId])
  @@map("diaries")
}

model Photo {
  id        String   @id @default(cuid())
  diaryId   String
  url       String
  userId    String
  isSynced  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  diary     Diary    @relation(fields: [diaryId], references: [id], onDelete: Cascade)

  @@index([diaryId])
  @@index([userId])
  @@map("photos")
}


model Checklist {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  text           String
  subtext        String? 
  isChecked      Boolean  @default(false)
  dueDate        String?  // Flutter에서는 TEXT로 저장
  completedDate  String?  // Flutter에서는 TEXT로 저장
  isSynced       Boolean  @default(false)

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId, isChecked])
  @@index([userId, dueDate])
  @@map("checklists")
}

model Schedule {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  text              String
  subText           String?
  dayOfWeek         Int?     // 0-6 (Sunday to Saturday)
  selectedDate      String?  // Flutter에서는 TEXT로 저장
  isRoutine         Boolean  @default(false)
  startTimeHour     Int      // 시작 시간 (시)
  startTimeMinute   Int      // 시작 시간 (분)
  endTimeHour       Int      // 종료 시간 (시)
  endTimeMinute     Int      // 종료 시간 (분)
  colorValue        BigInt?  // 색상 값 (BIGINT for Flutter Color values)
  hasAlarm          Boolean? @default(false)
  alarmOffset       Int?     // Minutes before event
  isSynced          Boolean  @default(false)

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId, selectedDate])
  @@index([userId, dayOfWeek])
  @@index([userId, isRoutine])
  @@map("schedules")
}

model BlacklistedToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime

  @@index([expiresAt])
  @@map("blacklisted_tokens")
}

model UserFeedbackLimit {
  id        String   @id @default(cuid())
  userId    String
  date      String // yyyy-MM-dd
  count     Int     @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId])
  @@map("user_feedback_limits")
}

model EmotionRecord {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date         String   // yyyy-MM-dd format
  hour         Int      // 0-23
  emotionType  String   // 감정 타입 (예: happy, sad, angry, etc.)
  notes        String?  // 추가 메모
  isSynced     Boolean  @default(false)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, date, hour])
  @@index([userId, date])
  @@map("emotion_records")
}

model LocationLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  latitude  Float
  longitude Float
  accuracy  Float?
  address   String?
  timestamp String   // Flutter에서는 TEXT로 저장
  isSynced  Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, timestamp])
  @@map("location_logs")
}

model StepRecord {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date      String   // yyyy-MM-dd format
  stepCount Int
  distance  Float?   // 거리 (미터)
  calories  Float?   // 칼로리
  isSynced  Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, date])
  @@index([userId])
  @@map("steps")
}

model AiFeedback {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date         String   // yyyy-MM-dd format
  feedbackText String   // 피드백 내용
  isSynced     Boolean  @default(false)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId, date])
  @@map("ai_feedback")
}
