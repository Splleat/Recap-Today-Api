generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  userId    String?  @unique
  name      String?
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  diaries   Diary[]
  appusages AppUsage[]
  checklists Checklist[]
  schedules Schedule[]
  feedbackLimits UserFeedbackLimit[]

  @@index([userId])
  @@map("users")
}

model AppUsage {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date             String
  packageName      String
  appName          String
  usageTimeInMillis Int
  appIconPath      String?

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([userId])
  @@map("appusages")
}

model Diary {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date       String
  title      String
  content    String?

  photos     Photo[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
  @@map("diaries")
}

model Photo {
  id        String   @id @default(cuid())
  diaryId   String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  diary     Diary    @relation(fields: [diaryId], references: [id])

  @@index([diaryId])
  @@map("photos")
}


model Checklist {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  text           String
  subtext        String? 
  isChecked      Boolean  @default(false)
  dueDate        DateTime?
  completedDate  DateTime?

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
  @@map("checklists")
}

model Schedule {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  text           String
  subText        String?
  dayOfWeek      Int?
  selectedDate   DateTime?
  isRoutine      Boolean
  startTime      String
  endTime        String
  color          String?
  hasAlarm       Boolean?
  alarmOffset    Int? // Milliseconds

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
  @@map("schedules")
}

model BlacklistedToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime

  @@map("blacklisted_tokens")
}model UserFeedbackLimit {
  id        String   @id @default(cuid())
  userId    String
  date      String // yyyy-MM-dd
  count     Int     @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId])
  @@map("user_feedback_limits")
}
